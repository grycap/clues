import unittest
import os
from mock import MagicMock, patch
import classad
import sys

sys.path.append("..")
sys.path.append(".")

from clueslib.node import NodeInfo
from clueslib.request import Request
from cluesplugins import condor


def open_file(file_name):
    tests_path = os.path.dirname(os.path.abspath(__file__))
    abs_file_path = os.path.join(tests_path, file_name)
    return open(abs_file_path, 'r')


def get_jobs_scheduled_attributes(maxrange):
    list_jobs_scheduled_attr = []
    # gather scheduled jobs from respective file job$n.txt
    # files are generated by generate_job_sched.py
    for i in range(0, maxrange):
        filename = 'test-files/job' + str(i) + '.txt'
        tmpfile_1line = open_file(filename)
        tmpobj = classad.parse(tmpfile_1line)
        list_jobs_scheduled_attr.append(tmpobj)
        tmpfile_1line.close()
    return list_jobs_scheduled_attr


def get_schedulers(filename):
    list_schedulers = []
    tmpfile_1sched = open_file(filename)
    sched = classad.parse(tmpfile_1sched)
    list_schedulers.append(sched)
    tmpfile_1sched.close()
    return list_schedulers


def get_worker_nodes(filename):
    worker_nodes = []
    tmpfile_wn = open_file(filename)
    wn = classad.parse(tmpfile_wn)
    worker_nodes.append(wn)
    tmpfile_wn.close()
    return worker_nodes


class TestCondorPlugin(unittest.TestCase):

    def __init__(self, *args):
        """Init test class."""
        unittest.TestCase.__init__(self, *args)

    def test_run_command(self):
        self.assertEqual(condor.run_command("echo test".split(" ")), b'test\n')

    @patch('subprocess.Popen.communicate')
    def test_run_command_subprocess_error(self, mock_subprocess):
        mock_subprocess.return_value = ('test', 'error')
        with self.assertRaises(Exception):
            condor.run_command("echo test".split(" "))

    # Condor job states: 1-Idle, 2-Running, 3-Removed, 4-Completed, 5-Held, 6-Transferring Output, 7-Suspended
    # CLUES2 job states: ATTENDED o PENDING

    def test_infer_chronos_state_idle(self):
        self.assertEqual(condor.infer_clues_job_state(1), Request.PENDING)

    def test_infer_chronos_state_running(self):
        self.assertEqual(condor.infer_clues_job_state(2), Request.ATTENDED)

    def test_infer_chronos_state_removed(self):
        self.assertEqual(condor.infer_clues_job_state(3), Request.ATTENDED)

    def test_infer_chronos_state_completed(self):
        self.assertEqual(condor.infer_clues_job_state(4), Request.ATTENDED)

    def test_infer_chronos_state_held(self):
        self.assertEqual(condor.infer_clues_job_state(5), Request.ATTENDED)

    def test_infer_chronos_state_transferout(self):
        self.assertEqual(condor.infer_clues_job_state(6), Request.ATTENDED)

    def test_infer_chronos_state_suspended(self):
        self.assertEqual(condor.infer_clues_job_state(7), Request.ATTENDED)

    def test_init_lrms_empty(self):
        lrms = condor.lrms()
        self.assertEqual(lrms._server_ip, 'htcondoreserver')

    def test_init_lrms(self):
        lrms = condor.lrms('test_ip')
        self.assertEqual(lrms._server_ip, 'test_ip')

    @patch('htcondor.Schedd.query')
    @patch('htcondor.Collector.locateAll')
    def test_get_jobinfolist(self, locateAll, query):
        test_numjobs = 2
        locateAll.return_value = get_schedulers('test-files/schedulers.txt')
        query.return_value = get_jobs_scheduled_attributes(test_numjobs)
        job_info_list = condor.lrms(MagicMock(condor.lrms)).get_jobinfolist()
        lenj = len(job_info_list)
        self.assertEqual(lenj, test_numjobs)

    @patch('htcondor.Schedd.query')
    @patch('cluesplugins.condor.get_schedulers_list_from_Schedd')
    @patch('cluesplugins.condor.get_worker_nodes_list_from_Startd')
    def test_get_nodeinfolist(self, get_worker_nodes_list, get_schedulers_list, query):
        get_worker_nodes_list.return_value = get_worker_nodes(
            'test-files/workernodes.txt')
        get_schedulers_list.return_value = get_schedulers(
            'test-files/schedulers.txt')
        query.return_value = get_jobs_scheduled_attributes(2)

        node_info_list = condor.lrms(MagicMock(condor.lrms)).get_nodeinfolist()
        if node_info_list:
            result = '[NODE "wn1.condor.vagrant"] state: used, 1/1 (free slots), 457/457 (mem)'
            self.assertEqual(str(node_info_list['wn1.condor.vagrant']), result)
        else:
            print('No node_info_list')


if __name__ == '__main__':
    unittest.main()
